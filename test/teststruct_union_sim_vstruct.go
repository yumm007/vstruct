// Code generated by vstruct; DO NOT EDIT.

package teststruct

import (
	"bytes"
	"encoding/binary"
)


func (u *UnionSim)Encode() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := u.encodeToBuffer(buf); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (u *UnionSim)encodeToBuffer(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, &u.Len); err != nil {
		return err
	}
	for i := 0; i < int(u.Len); i++ {
		if err := u.Arr[i].encodeToBuffer(buf); err != nil {
			return err
		}
	}
	if err := binary.Write(buf, binary.LittleEndian, &u.Crc); err != nil {
		return err
	}

	return nil
}

func (u *UnionSim)Decode(payload []byte) error {
	buf := bytes.NewBuffer(payload)
	return u.decodeFromBuffer(buf)
}

func (u *UnionSim)decodeFromBuffer(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &u.Len); err != nil {
		return err
	}
	for i := 0; i < int(u.Len); i++ {
		var ele Simples
		if err := ele.decodeFromBuffer(buf); err != nil {
			return err
		}
		u.Arr = append(u.Arr, ele)
	}
	if err := binary.Read(buf, binary.LittleEndian, &u.Crc); err != nil {
		return err
	}

	return nil
}
