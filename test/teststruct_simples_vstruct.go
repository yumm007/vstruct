// Code generated by vstruct; DO NOT EDIT.

package teststruct

import (
	"bytes"
	"encoding/binary"
)


func (s *Simples)Encode() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := s.encodeToBuffer(buf); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (s *Simples)encodeToBuffer(buf *bytes.Buffer) error {
	if err := binary.Write(buf, binary.LittleEndian, &s.Id); err != nil {
		return err
	}
	if err := binary.Write(buf, binary.LittleEndian, &s.NameLen); err != nil {
		return err
	}
	for i := 0; i < int(s.NameLen); i++ {
		if err := binary.Write(buf, binary.LittleEndian, &s.Name); err != nil {
			return err
		}
	}

	return nil
}

func (s *Simples)Decode(payload []byte) error {
	buf := bytes.NewBuffer(payload)
	return s.decodeFromBuffer(buf)
}

func (s *Simples)decodeFromBuffer(buf *bytes.Buffer) error {
	if err := binary.Read(buf, binary.LittleEndian, &s.Id); err != nil {
		return err
	}
	if err := binary.Read(buf, binary.LittleEndian, &s.NameLen); err != nil {
		return err
	}
	for i := 0; i < int(s.NameLen); i++ {
		var ele uint8
		if err := binary.Read(buf, binary.LittleEndian, &s.Name); err != nil {
			return err
		}
		s.Name = append(s.Name, ele)
	}

	return nil
}
